import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:ascenity_app/providers/mood_provider.dart';
import 'package:ascenity_app/services/firestore_services.dart';
import 'package:ascenity_app/extensions/color_extensions.dart';

class MoodTrackingPage extends StatelessWidget {
  const MoodTrackingPage({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => MoodProvider(),
      child: const _MoodTrackingView(),
    );
  }
}

class _MoodTrackingView extends StatefulWidget {
  const _MoodTrackingView();

  @override
  State<_MoodTrackingView> createState() => _MoodTrackingViewState();
}

class _MoodTrackingViewState extends State<_MoodTrackingView>
    with SingleTickerProviderStateMixin {
  final _firestore = FirestoreService();
  late final AnimationController _emojiController;
  late final Animation<double> _emojiScale;

  @override
  void initState() {
    super.initState();
    _emojiController = AnimationController(vsync: this, duration: const Duration(milliseconds: 220));
    _emojiScale = Tween(begin: 1.0, end: 1.2).animate(CurvedAnimation(parent: _emojiController, curve: Curves.easeOut));
  }

  @override
  void dispose() {
    _emojiController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final mood = context.watch<MoodProvider>();
    final gradient = _bgGradientForLevel(mood.level);

    return Scaffold(
      appBar: AppBar(title: const Text('Track Mood')),
      body: Container(
        decoration: BoxDecoration(gradient: gradient),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                const SizedBox(height: 12),
                GestureDetector(
                  onTap: () async {
                    await _emojiController.forward();
                    await _emojiController.reverse();
                  },
                  child: ScaleTransition(
                    scale: _emojiScale,
                    child: Text(mood.moodEmoji, style: const TextStyle(fontSize: 96)),
                  ),
                ),
                const SizedBox(height: 8),
                Text(mood.moodLabel.toUpperCase(), style: const TextStyle(fontWeight: FontWeight.bold)),
                const Spacer(),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: const [
                    Text('üòî'),
                    Text('üòê'),
                    Text('üòÑ'),
                  ],
                ),
                Slider(
                  value: mood.level.toDouble(),
                  min: 0,
                  max: 2,
                  divisions: 2,
                  label: mood.moodLabel,
                  onChanged: (v) {
                    context.read<MoodProvider>().setLevel(v.round());
                    _emojiController.forward().then((_) => _emojiController.reverse());
                  },
                ),
                const SizedBox(height: 16),
                AnimatedSwitcher(
                  duration: const Duration(milliseconds: 350),
                  transitionBuilder: (child, anim) => ScaleTransition(scale: anim, child: child),
                  child: mood.justSaved
                      ? _SavedPill(key: const ValueKey('saved'))
                      : SizedBox(
                          key: const ValueKey('save'),
                          width: double.infinity,
                          child: ElevatedButton.icon(
                            onPressed: () async {
                              final moodProvider = context.read<MoodProvider>();
                              final label = moodProvider.moodLabel;
                              final level = moodProvider.level;

                              await _firestore.saveMoodEntry(level, label);
                              if (!mounted) return;
                              moodProvider.setJustSaved(true);
                              await Future.delayed(const Duration(seconds: 1));
                              if (!mounted) return;
                              moodProvider.setJustSaved(false);
                            },
                            icon: const Icon(Icons.check_circle_outline),
                            label: const Padding(
                              padding: EdgeInsets.symmetric(vertical: 12.0),
                              child: Text('Save'),
                            ),
                          ),
                        ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  LinearGradient _bgGradientForLevel(int level) {
    switch (level) {
      case 0:
        return const LinearGradient(colors: [Color(0xFF2C2C54), Color(0xFF6C5CE7)], begin: Alignment.topLeft, end: Alignment.bottomRight);
      case 1:
        return const LinearGradient(colors: [Color(0xFF40D5FF), Color(0xFF497EFF)], begin: Alignment.topLeft, end: Alignment.bottomRight);
      default:
        return const LinearGradient(colors: [Color(0xFF57FFBB), Color(0xFF40D5FF)], begin: Alignment.topLeft, end: Alignment.bottomRight);
    }
  }
}

class _SavedPill extends StatelessWidget {
  const _SavedPill({super.key});
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12),
      decoration: BoxDecoration(
        color: Colors.greenAccent.withValues(alpha: 0.2),
        borderRadius: BorderRadius.circular(24),
        border: Border.all(color: Colors.greenAccent.withValues(alpha: 0.6)),
      ),
      child: const Center(child: Text('Saved ‚úì')),
    );
  }
}
